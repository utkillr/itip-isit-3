Введение

Алгоритм - последовательность вычислительных шагов, которые преобразуют входные величины в выходные

Время работы алгоритма: T(n)

Задача сортировки:
	На вход подается последовательность из n сравнимых объектов вида <a1, a2, ..., an>
	На выходе имеется перестановка из входных объектов <a1', a2', ..., an'>, что a1'>=a2'>=...>=an' (либо a1'<=a2'<=...<=a3')
	По дефолту сортируем по возрастанию

Instance (экземпляр задачи):
	Вход: <10, 8, 11, 2>
	Выход: <2, 8, 10, 11>

!Алгоритм сортировки вставкой:
	Пример:
		Вход: <10, 2, 1, 8>
		Первое число - уже отсортированная последовательность:
		<10 2 1 8>
		Далее берем второе число и вставляем относительно первого:
		<2 10 1 8>
		Берем следующий элемент: 1. Снова сортируем
		<2 1 10 8>
		<1 2 10 8>
		Берем следующий элемент: 8. Снова сортируем:
		<1 2 8 10>
		Условие остановки вставки: Элемент дальше не двигается
		Условие конца сортировки: достигнут последний элемент
	Псевдокод:
		Insertion_Sort(A)
			for j <- 2 to length[A] do
				key <- A[j]
				//Вставить A[j] в отсортированный A[1...j-1]
				i <- j-1
				while (i>0 and A[i]>key) do
					A[i+1] = A[i]
					i = i - 1
				A[i+1] = key
	Время выполнения:
		Пример дотошного разбора:								|Время	|Число 				|
			for j <- 2 to length[A] do							|C1		|n					|
				key <- A[j]										|C2		|n-1				|
				//Вставить A[j] в отсортированный A[1...j-1]	|0		|0					|
				i <- j-1										|C4		|n-1				|
				while (i>0 and A[i]>key) do						|C5		|S(j=2 to n) (Tj)	|
					A[i+1] <- A[i]								|C6		|S(j=2 to n) (Tj-1)	|
					i <- i - 1									|C7		|S(j=2 to n) (Tj-1)	|
				A[i+1] <- key									|C8		|n-1				|

			Tj - количество проверок условия цикла while
			T(n) = C1*n + (C2+C4+C8)*(n-1) + C5*(S(j=2 to n) Tj) + (C6+C7)*(S(j=2 to n) (Tj-1))
			В худшем случае Tj = j
			T(n) = C1*n + (C2+C4+C8)*(n-1) + C5*(S(j=2 to n) j) + (C6+C7)*(S(j=2 to n) (j-1))
			T(n) = C1*n + (C2+C4+C8)*(n-1) + C5*n*(n+1)/2 - C5 + (C6+C7)*n*(n-1)/2
			T(n) = C'*n + C''n^2 + C'''

			В лучшем случае Tj = 1
			T(n) = C1*n + (C2+C4+C8)*(n-1) + C5*(n-1)
			T(n) = C'n + C''

Тогда	T(n) best =		c1*n+c2 		-> c1*n 	-> TETA(n)
		T(n) worst =	c1*n^2+c2*n+c3 	-> c1*n^2	-> TETA(n^2)


!ДЗ: Показать, что T(n) в худшем и лучшем случаях имеет виды, указанные сверху
!ДЗ: Корман. 2-1-3*, 2-2-2, 2-2-3